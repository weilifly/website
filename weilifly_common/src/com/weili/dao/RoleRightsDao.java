package com.weili.dao;import java.sql.Connection;import java.sql.SQLException;import java.util.List;import java.util.Map;import com.shove.data.DataException;import com.shove.data.DataSet;import com.weili.constants.IConstants;import com.weili.database.Dao;import com.weili.database.Dao.Tables;import com.weili.database.Dao.Views;public class RoleRightsDao {	public Long addRoleRihts(Connection conn,Long roleId,Long rightsId) throws SQLException{		Dao.Tables.t_role_rights role_rights = new Dao().new Tables().new t_role_rights();		role_rights.roleId.setValue(roleId);		role_rights.rightsId.setValue(rightsId);		return role_rights.insert(conn);	}		public Long updateRoleRihts(Connection conn,Long id,Long roleId,Long rightsId) throws SQLException{		Dao.Tables.t_role_rights role_rights = new Dao().new Tables().new t_role_rights();		role_rights.roleId.setValue(roleId);		role_rights.rightsId.setValue(rightsId);		return role_rights.update(conn, " id="+id);	}		/**	 * 根据角色编号删除角色权限	 * @param conn	 * @param roleId	 * @return	 * @throws SQLException	 */	public Long deleteRoleRightsByRoleId(Connection conn,long roleId) throws SQLException{		Dao.Tables.t_role_rights role_rights = new Dao().new Tables().new t_role_rights();		return role_rights.delete(conn, " roleId = "+roleId);	}		/**	 * 根据角色编号查询角色权限信息	 * @param conn	 * @param roleId 角色编号	 * @return	 * @throws SQLException	 * @throws DataException	 */	public List<Map<String,Object>> queryRoleRightByRoleId(Connection conn,long roleId) throws SQLException, DataException{		Dao.Tables.t_role_rights roleRight = new Dao().new Tables().new t_role_rights();		DataSet dataSet = roleRight.open(conn, "", " roleId ="+roleId, "", -1, -1);		dataSet.tables.get(0).rows.genRowsMap();		return dataSet.tables.get(0).rows.rowsMap;	}		/**	 * 根据角色编号查询权限信息	 * @param conn	 * @param roleId	 * @return	 * @throws SQLException	 * @throws DataException	 */	public List<Map<String,Object>> queryRoleRightsIdByRoleId (Connection conn,long roleId) throws SQLException, DataException{		Dao.Tables.t_role_rights roleRight = new Dao().new Tables().new t_role_rights();		DataSet dataSet = roleRight.open(conn, " roleId,group_concat(CAST(rightsId as char)) as rightsIds ", " roleId ="+roleId+" GROUP BY roleId", "", -1, -1);		dataSet.tables.get(0).rows.genRowsMap();		return dataSet.tables.get(0).rows.rowsMap;	}		/**	 * 根据角色编号查询管理员角色权限信息	 * @param conn	 * @param roleId 角色编号	 * @return	 * @throws DataException 	 * @throws SQLException 	 */	public List<Map<String,Object>> queryAdminRoleRightMenu(Connection conn,long roleId) throws SQLException, DataException{		Dao.Views.v_t_role_rights_menu rrm = new Dao().new Views().new v_t_role_rights_menu();		DataSet dataSet = rrm.open(conn, "", " roleId = "+roleId, " indexs ASC", -1, -1);		dataSet.tables.get(0).rows.genRowsMap();		return dataSet.tables.get(0).rows.rowsMap;	}		}